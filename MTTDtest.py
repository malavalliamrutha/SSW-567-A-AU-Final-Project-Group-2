import unittest#from unittest import TestCasefrom MRTD import decodefrom MRTD import extractLine1from MRTD import extractLine2from MRTD import encodefrom MRTD import encodeLine1from MRTD import encodeLine2from MRTD import getCheckDigitclass decodeencodeTest(unittest.TestCase):            def testdecode(self):        line='P<CIVLYNN<<NEVEAH<BRAM<<<<<<<<<<<<<<<<<<<<<<;W620126G54CIV5910106F9707302AJ010215I<<<<<<6'        self.assertEqual(decode(line),'{"line1": {"issuing_country": "CIV", "last_name": "LYNN", "given_name": "NEVEAH BRAM"}, "line2": {"passport_number": "W620126G5", "country_code": "CIV", "birth_date": "591010", "sex": "F", "expiration_date": "970730", "personal_number": "AJ010215I"}}','ExpectedResult3')        def testextractLine1(self):        self.assertEqual(extractLine1('P<CIVLYNN<<NEVEAH<BRAM<<<<<<<<<<<<<<<<<<<<<<'),{'issuing_country': 'CIV', 'last_name':'LYNN', 'given_name': 'NEVEAH BRAM'},'Got Expected result2')            def testextractLine2(self):        self.assertEqual(extractLine2("W620126G54CIV5910106F9707302AJ010215I<<<<<<6"),{'passport_number': 'W620126G5', 'country_code': 'CIV', 'birth_date': '591010', 'sex': 'F', 'expiration_date': '970730', 'personal_number': 'AJ010215I'},"Got ExpectedResult3")    def testencode(self):        data = {                    "line1": {                        "issuing_country": "CIV",                        "last_name": "LYNN",                        "given_name": "NEVEAH BRAM"                    },                    "line2": {                        "passport_number": "W620126G5",                        "country_code": "CIV",                        "birth_date": "591010",                        "sex": "F",                        "expiration_date": "970730",                        "personal_number": "AJ010215I"                    }        }          self.assertEqual(encode(data),'P<CIVLYNN<<NEVEAH<BRAM<<<<<<<<<<<<<<<<<<<<<<;W620126G54CIV5910106F9707302AJ010215I<<<<<<6','Got Expected result4')            def testencode1(self):        data = {                    "line": {                        "issuing_country": "CIV",                        "last_name": "LYNN",                        "given_name": "NEVEAH BRAM"                    }        }        self.assertEqual(encodeLine1(data['line']),'P<CIVLYNN<<NEVEAH<BRAM<<<<<<<<<<<<<<<<<<<<<<','Got Expected result5')          def testencode2(self):        data = {                    "line": {                        "passport_number": "W620126G5",                        "country_code": "CIV",                        "birth_date": "591010",                        "sex": "F",                        "expiration_date": "970730",                        "personal_number": "AJ010215I"             }        }        self.assertEqual(encodeLine2(data['line']),'W620126G54CIV5910106F9707302AJ010215I<<<<<<6','Got Expected result6')    def testgetCheckDigit(self):        passportNumber="W620126G5"        birthdate="591010"        expiry="970730"        personal_number="AJ010215I"        self.assertEqual(getCheckDigit(passportNumber),'4','success')        self.assertEqual(getCheckDigit(birthdate),'6','success')        self.assertEqual(getCheckDigit(expiry),'2','success')        self.assertEqual(getCheckDigit(personal_number),'6','success')                           if __name__ == '__main__':   print('Running unit tests')   unittest.main()   